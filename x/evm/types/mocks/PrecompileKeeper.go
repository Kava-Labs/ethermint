// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// PrecompileKeeper is an autogenerated mock type for the PrecompileKeeper type
type PrecompileKeeper struct {
	mock.Mock
}

type PrecompileKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *PrecompileKeeper) EXPECT() *PrecompileKeeper_Expecter {
	return &PrecompileKeeper_Expecter{mock: &_m.Mock}
}

// GetPrecompileAddresses provides a mock function with given fields: ctx
func (_m *PrecompileKeeper) GetPrecompileAddresses(ctx types.Context) []common.Address {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPrecompileAddresses")
	}

	var r0 []common.Address
	if rf, ok := ret.Get(0).(func(types.Context) []common.Address); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	return r0
}

// PrecompileKeeper_GetPrecompileAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrecompileAddresses'
type PrecompileKeeper_GetPrecompileAddresses_Call struct {
	*mock.Call
}

// GetPrecompileAddresses is a helper method to define mock.On call
//   - ctx types.Context
func (_e *PrecompileKeeper_Expecter) GetPrecompileAddresses(ctx interface{}) *PrecompileKeeper_GetPrecompileAddresses_Call {
	return &PrecompileKeeper_GetPrecompileAddresses_Call{Call: _e.mock.On("GetPrecompileAddresses", ctx)}
}

func (_c *PrecompileKeeper_GetPrecompileAddresses_Call) Run(run func(ctx types.Context)) *PrecompileKeeper_GetPrecompileAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *PrecompileKeeper_GetPrecompileAddresses_Call) Return(_a0 []common.Address) *PrecompileKeeper_GetPrecompileAddresses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PrecompileKeeper_GetPrecompileAddresses_Call) RunAndReturn(run func(types.Context) []common.Address) *PrecompileKeeper_GetPrecompileAddresses_Call {
	_c.Call.Return(run)
	return _c
}

// NewPrecompileKeeper creates a new instance of PrecompileKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrecompileKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *PrecompileKeeper {
	mock := &PrecompileKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
